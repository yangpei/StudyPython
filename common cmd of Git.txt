一、创建版本库
1. 首先，选择一个合适的地方，创建一个空目录：
$ mkdir learngit
$ cd learngit
$ pwd
/Users/michael/learngit

2.第二步，通过git init命令把这个目录变成Git可以管理的仓库：
$ git init
Initialized empty Git repository in /Users/michael/learngit/.git/

把一个文件放到Git仓库只需要两步:
1)第一步，用命令git add告诉Git，把文件添加到仓库：
$ git add readme.txt
2)用命令git commit告诉Git，把文件提交到仓库：
$ git commit -m "wrote a readme file"
(git commit命令，-m后面输入的是本次提交的说明，可以输入任意内容)

////////////////////////////////////////////////////////////////////////////////////////////
二、版本回退等
1. git status命令可以让我们时刻掌握仓库当前的状态
2.git diff这个命令，看具体修改了什么内容
（如果git status告诉你有文件被修改过，用git diff可以查看修改内容。）
3.在Git中，我们用git log命令查看历史记录
4.使用用git reset命令进行版本回退：
$ git reset --hard HEAD^
（上一个版本就是HEAD^，上上一个版本就是HEAD^^，当然往上100个版本写成HEAD~100。）
5. Git提供了一个命令git reflog用来记录你的每一次命令：
$ git reflog
ea34578 HEAD@{0}: reset: moving to HEAD^
3628164 HEAD@{1}: commit: append GPL
ea34578 HEAD@{2}: commit: add distributed
cb926e7 HEAD@{3}: commit (initial): wrote a readme file


    HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。

    穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。

    要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。

6.注意Git是如何跟踪修改的，每次修改，如果不add到暂存区，那就不会加入到commit中。	
	
7.git checkout -- file可以丢弃工作区的修改：

$ git checkout -- readme.txt

命令git checkout -- readme.txt意思就是，把readme.txt文件在工作区的修改全部撤销，这里有两种情况：

一种是readme.txt自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；

一种是readme.txt已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。	

git checkout -- file命令中的--很重要，没有--，就变成了“切换到另一个分支”的命令
	
8. 用命令git reset HEAD file可以把暂存区的修改撤销掉（unstage），重新放回工作区：

$ git reset HEAD readme.txt
Unstaged changes after reset:
M       readme.txt

9.
场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout -- file。

场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。

场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。	
	
10.命令git rm用于删除一个文件。如果一个文件已经被提交到版本库，那么你永远不用担心误删，但是要小心，你只能恢复文件到最新版本，你会丢失最近一次提交后你修改的内容。	
	
	
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////	
三、远程仓库
1.第1步：创建SSH Key。
$ ssh-keygen -t rsa -C "youremail@example.com"
(在用户主目录里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，这两个就是SSH Key的秘钥对，id_rsa是私钥，不能泄露，id_rsa.pub是公钥，可以放心地告诉任何人。)
第2步：登陆GitHub，打开“Account settings”，“SSH Keys”页面：
然后，点“Add SSH Key”，填上任意Title，在Key文本框里粘贴id_rsa.pub文件的内容：

2.我们根据GitHub的提示，在本地的learngit仓库下运行命令：
$ git remote add origin git@github.com:*********/learngit.git

3.下一步，就可以把本地库的所有内容推送到远程库上：
$ git push -u origin master

























	
	
